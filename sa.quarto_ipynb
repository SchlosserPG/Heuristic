{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Simulated Annealing\"\n",
        "author: \"Pamela Schlosser\"\n",
        "format: html\n",
        "runtime: python\n",
        "---\n",
        "\n",
        "\n",
        "# What is a Metaheuristic Algorithm?\n",
        "\n",
        "-   One of the main attributes of a metaheuristic algorithm is that it performs a certain set of operators for a certain number of iterations to search for the optimal solution with great shrewdness.\n",
        "-   Compared to the Exhaustive Search (ES) and hill climbing (HC) algorithms, a metaheuristic algorithm will neither check all the candidate solutions of a complex optimization problem like ES nor fall into a local optimum at early iterations as easily as HC\n",
        "\n",
        "## History of Metaheuristics\n",
        "\n",
        "-   Although the term “metaheuristic” was introduced in the 1980s, several metaheuristic algorithms were actually presented in the 1960s or even earlier.\n",
        "-   The year 1990 can be regarded as the first watershed in the development of metaheuristic algorithms. However, the available computing power may not satisfy the requirements of some complicated metaheuristic algorithms.\n",
        "-   Since the late 1990s, the number of metaheuristic algorithms has exploded. More and more studies use “the number of evaluations” to replace “the number of iterations” for evaluating the performance of a metaheuristic algorithm because each search can be regarded as an investment of computation resource.\n",
        "    -   Using the number of evaluations provides a way that is more precise than using the number of iterations to evaluate the effect (improvement or outcome) of adding an additional unit of computation resource for the search\n",
        "-   From the year 2010 or even earlier, some groups have attempted to apply metaheuristic algorithms in high-performance computing environments.\n",
        "    -   Using distributed or parallel computing systems to accelerate the response time of metaheuristic algorithms is an intuitive approach adopted in some early studies.\n",
        "    -   Some of the parallel metaheuristics are not only able to provide the end results to the user more quickly; they also can find better results than metaheuristic algorithms on a single machine because the parallel computing mechanism leads them to increase the search diversity during the convergence process.\n",
        "    -   When we look at these distributed and parallel computing environments, the cloud computing platform (e.g., Hadoop, Spark, Microsoft Azure, Amazon EC2, or Google Compute Engine) can now provide an easy way to use a distributed computing system to further reduce the response time of metaheuristics.\n",
        "\n",
        "## A Unified Framework for Metaheuristic Algorithms (UFM)\n",
        "\n",
        "-   The appearance of metaheuristic algorithms has come with methods to classify them. These classification methods include:\n",
        "\n",
        "(1) nature-inspired vs. non-nature inspired,\n",
        "(2) dynamic vs. static objective function,\n",
        "(3) one vs. various neighborhood structures,\n",
        "(4) memory usage vs. memoryless methods,\n",
        "(5) with vs. without local search method, and\n",
        "(6) population-based vs. single-solution-based search.\n",
        "\n",
        "## UFM 5 Main Operators\n",
        "\n",
        "1.  Initialization (I): The initialization operator normally plays the roles of reading the input file (e.g., dataset), initializing all the parameters of a metaheuristic algorithm, and determining the initial solutions, which is normally based on a random process.\n",
        "2.  Transition (T): The transition operator usually plays the role of varying the search directions, such as perturbing a portion of the subsolutions of the current solution to generate a new candidate solution or generating a set of new candidate solutions each based on two or more of the current solutions.\n",
        "3.  Evaluation (E): The evaluation operator is responsible for measuring the quality of solutions, such as calculating the objective value of each solution to be used by the determination operator to distinguish the quality of all the solutions. An intuitive way is to use an objective function to measure the quality of a solution for the problem in question. However, some metaheuristics do not use the “objective value” directly to measure their solutions; rather, the objective value of a solution has to undergo some sort of transformation to obtain the so-called “fitness value.”\n",
        "4.  Determination (D): The determination operator plays the role of deciding the search directions by using information the evaluation operator provides during the convergence process. The performance of a metaheuristic algorithm depends to a large extent on the performance of this operator. A “good” search strategy for this operator will make it possible for the metaheuristic algorithm to find a better solution faster or to avoid falling into a local optimum at early iterations.\n",
        "5.  Output (O): In spite of the fact that this operator seems to be trivial, the reality is that it can be either simple or complex depending on how much information we want to display for the metaheuristic algorithm. It can be as simple as displaying only the final result of the metaheuristic algorithm, or it can be as complex as displaying the trajectory of convergence of the metaheuristic algorithm to better understand the performance of a metaheuristic algorithm\n",
        "\n",
        "## UFM\n",
        "\n",
        "-   In this framework, I denotes the input dataset, s denotes the current solution, $\\nu$ denotes the candidate solution, $f_s$ denotes the objective value of $s$, and $f_\\nu$ denotes the objective value of $\\nu$. Also, $s$ and $\\nu$ can denote either a single solution or a set of solutions, where each solution has $n$ elements or is an $n-tuple$.\n",
        "\n",
        "![UFM](Pictures/UFM.png \"UFM\")\n",
        "\n",
        "## Comparison between exhaustive search, greedy, and metaheuristic algorithms\n",
        "\n",
        "![Compare Models](Pictures/compare.png \"Compare Models\")\n",
        "\n",
        "# Simulated Annealing (SA)\n",
        "\n",
        "-   If life is like simulated annealing, what’s the most memorable ‘temperature drop’ moment where you had to settle down and stick to one choice?\n",
        "\n",
        "-   A single-solution-based algorithm\n",
        "\n",
        "-   A probabilistic optimization algorithm inspired by the annealing process in metallurgy, where materials are heated and then slowly cooled to reduce defects, thereby optimizing their structural properties.\n",
        "\n",
        "-   In optimization, SA is used to find a good approximation to the global minimum of a function in a large search space, particularly when the search space is discrete or contains multiple local minima.\n",
        "\n",
        "-   The search strategy of SA is to start with a random possible solution in the solution space and then use the Metropolis acceptance criterion to determine whether a worse solution is to be accepted or not.\n",
        "\n",
        "-   To emulate the annealing process for a minimization optimization problem, SA will first calculate the difference between the objective values of the new candidate solution $\\nu$ and the current solution $s$ to see whether it will accept the new candidate solution or not, as follows: $\\Delta_f^{\\text{min}} = f(\\nu) - f(s)$\n",
        "\n",
        "## Key Components\n",
        "\n",
        "-   Solution Space:\n",
        "    -   This is the space of all possible solutions to the problem.\n",
        "-   Objective Function:\n",
        "    -   Defines the quality of a solution (usually the cost or energy to minimize).\n",
        "    -   For instance, in the Travelling Salesman Problem (TSP), the objective function would be the total distance of the tour.\n",
        "-   Temperature:\n",
        "    -   This controls the probability of accepting worse solutions.\n",
        "    -   Initially, the temperature is high, allowing the algorithm to explore the solution space more freely.\n",
        "    -   As the temperature lowers, the algorithm becomes more conservative, accepting only smaller degradations in the objective.\n",
        "-   Cooling Schedule:\n",
        "    -   This is a function that dictates how the temperature decreases over time (iterations).\n",
        "    -   Typically, it follows a geometric decay, where the temperature decreases by a factor on each iteration (e.g., $T = T_0 * \\alpha^k$, where $T_0$ is the initial temperature, alpha is a constant, and $k$ is the iteration number).\n",
        "\n",
        "## Defining SA\n",
        "\n",
        "-   An iterative algorithm that explores the solution space of an optimization problem by considering not only improvements to the current solution but also occasional, controlled acceptance of worse solutions. This allows the algorithm to escape local minima and explore a broader range of the search space in search of a global minimum.\n",
        "    -   The function $f(x)$ that the algorithm seeks to minimize (or maximize)\n",
        "    -   The configuration or state is a point $x$ in the solution space, representing a possible solution to the problem.\n",
        "    -   The neighboring states are the set of solutions that are reachable from the current state through small modifications.\n",
        "    -   A control parameter temperature $T$) that regulates the likelihood of accepting worse solutions. It starts high and gradually decreases as the algorithm progresses.\n",
        "    -   As $T$ decreases, the probability of accepting worse solutions decreases, making the search more focused on local improvements.\n",
        "    -   A cooling schedule includes a function that controls the decrease of the temperature T over time\n",
        "\n",
        "## Usefulness of SA\n",
        "\n",
        "-   The basic idea of SA is to occasionally accept non-improving solutions, which means that SA will not always move to a better solution.\n",
        "-   Simulated Annealing is widely used in various fields, such as:\n",
        "    -   Combinatorial Optimization: Problems like the Traveling Salesman Problem (TSP), scheduling, and circuit design.\n",
        "    -   Machine Learning: Hyperparameter optimization, clustering.\n",
        "    -   Engineering: Structural design, control systems.\n",
        "-   Practical Applications: real-world problems where SA shines: vehicle routing, job scheduling, or portfolio optimization.\n",
        "\n",
        "## Tuning Parameters\n",
        "\n",
        "-   The success of SA heavily depends on the tuning of parameters like the cooling schedule, the initial temperature, and the size of the neighborhood.\n",
        "    -   hyperparameter tuning and experimentation.\n",
        "-   Comparison to Other Algorithms: To compare SA to algorithms like Genetic Algorithms (GA) or Greedy Heuristics, SA is more appropriate due to its exploration-exploitation trade-off. Where **exploration** (searching the solution space broadly) and **exploitation** (focusing on refining the best solutions found so far).\n",
        "\n",
        "## The Search Strategy of SA\n",
        "\n",
        "-   Start with a random possible solution in the solution space and then use the Metropolis acceptance criterion to determine whether a worse solution is to be accepted or not.\n",
        "-   In this example, $t^{\\Delta} \\quad$ and $\\quad t^{\\nabla}$ indicate that the solution at the $t+1^{\\text{th}}$ iteration is either better or not better than the solution at the $t^{\\text{th}}$ iteration, respectively.\n",
        "-   This example shows that if the starting point is 𝑥_9 and SA accepts only a new candidate solution that is better than the current solution, i.e., it has no escape mechanism, the search will get stuck at one of the two local optima ($x_8$ and $x_10$) denoted $L_1$ and $L_2$.\n",
        "\n",
        "![Search Strategy of SA](Pictures/sa.png \"Search Strategy of SA\")\n",
        "\n",
        "## SA Algorithm\n",
        "\n",
        "-   Initialization:\n",
        "    -   Choose an initial solution $x_0$ and an initial temperature $T_0$.\n",
        "-   Iteration:\n",
        "    -   For each step, generate a neighboring solution $x^′$ of the current solution $x$.\n",
        "    -   Compute the change in the objective function.\n",
        "    -   Decide whether to move to the new solution $x^′$ based on the acceptance probability.\n",
        "    -   Gradually reduce the temperature $T$ according to the cooling schedule\n",
        "-   Termination:\n",
        "    -   The algorithm stops when the temperature $T$ is sufficiently low or after a predefined number of iterations.\n",
        "    -   The best solution found during the process is returned.\n",
        "\n",
        "![SA Algorithm](Pictures/sa1.png \"SA Algorithm\")\n",
        "\n",
        "## Many Versions of SA Exist\n",
        "\n",
        "-   This framework is a little bit different from the model above because there are two loops (outer and inner loops). This implies that a certain number of new candidate solutions will be generated and evaluated before the temperature is updated.\n",
        "\n",
        "![SA Algorithm Variation](Pictures/sa2.png \"SA Algorithm Variation\")\n",
        "\n",
        "## Advantages and Disadvantages of SA\n",
        "\n",
        "### Advantages\n",
        "\n",
        "-   Global Search Capability: Unlike simple greedy algorithms, simulated annealing can escape local minima and potentially find a global minimum.\n",
        "-   Flexibility: It can be applied to a wide range of optimization problems, including those with complex, multimodal landscapes.\n",
        "-   Simplicity: The algorithm is relatively easy to implement and does not require gradient information, making it suitable for non-differentiable problems.\n",
        "\n",
        "### Disadvantages\n",
        "\n",
        "-   Computational Cost: The method can be slow, particularly for large problem spaces, as it requires many iterations to reach a good solution.\n",
        "-   Parameter Sensitivity: The performance of simulated annealing depends heavily on the choice of the cooling schedule, initial temperature, and other parameters.\n",
        "-   No Guarantee of Optimality: The algorithm does not guarantee finding the global optimum but rather a good approximation.\n",
        "\n",
        "# SA Algorithm\n",
        "\n",
        "-   To emulate the annealing process for a minimization optimization problem, SA will first calculate the difference between the objective values of the new candidate solution v and the current solution s to see whether it will accept the new candidate solution or not. $$\\Delta_f^{\\text{min}} = f(\\nu) - f(s)$$\n",
        "\n",
        "-   In case the difference between the objective values is less than $0$, SA will accept the new candidate solution as the current solution, which means that $\\nu$ replaces; otherwise, SA will calculate a probability to decide whether or not to accept a non-improving candidate solution.\n",
        "\n",
        "-   $p_a^{\\text{min}} = \\exp \\left( \\frac{-(f(v) - f(s))}{\\Psi_t} \\right) = \\exp \\left( \\frac{f(s) - f(v)}{\\Psi_t} \\right),$ where where $f(x)$ denotes the evaluation function, s denotes the current solution, $\\nu$ denotes the new solution, and $\\Psi_t$ denotes the temperature at the $t$-th iteration.\n",
        "\n",
        "-   To apply SA to a maximization optimization problem, all we have to do is to negate the difference with the following: $$\\Delta_f^{\\text{max}} -\\Delta_f^{\\text{min}} = -f(v) - -f(s) = f(s)-f(v)$$\n",
        "\n",
        "-   Such a modification makes it possible to check $\\Delta_f^{\\text{max}}$ in a similar way; that is,$\\Delta_f^{\\text{max}}<0$, SA will accept the new candidate solution as the current solution; otherwise, SA will again calculate a probability to decide whether or not to accept a non-improving candidate solution for the following: $$p_a^{\\text{max}} = \\exp \\left( \\frac{-(f(s) - f(v))}{\\Psi_t} \\right) = \\exp \\left( \\frac{f(v) - f(s)}{\\Psi_t} \\right)$$.\n",
        "\n",
        "## Examples of How Value Can Change\n",
        "\n",
        "![SA Changing Values](Pictures/sa3.png \"SA Changing Values\")\n",
        "\n",
        "-   In this case, $p_a^{\\text{max}}$=.329 and 0.007 for ${\\Psi_t}$ = .9 and 0.2, respectively. This indicates that a lower temperature Image implies a smaller probability Image to accept a non-improving candidate solution as the current solution.\n",
        "-   The value of $f_s$ goes from 2.0 to 1.1, the value of $p_a^{\\text{max}}$ goes from 0.329 up to 0.895. This means that in case $f(\\nu$\\$ is worse than $f(s)$, a smaller $\\Delta_f^{\\text{max}}$ implies a higher probability $p_a^{\\text{max}}$ to accept a non-improving candidate solution as the current solution.\n",
        "\n",
        "### Summary of Cases\n",
        "\n",
        "-   The new solution v is better than the current solution s.\n",
        "    -   SA will always accept the new solution owing to the fact that $P_A$ will always be greater than 1.0 and $r \\in [0,1]$ will always be smaller than $P_A$. The new solution $\\nu$ is worse than the current solution $s$. SA will accept the new solution only if $r < P_A$ , where $r$ is as defined above. The new solution $\\nu$ is worse than the current solution s. SA will not accept the new solution because $r \\geq P_A$ .\n",
        "\n",
        "## Comparing Algorithms\n",
        "\n",
        "-   Simulated Annealing Algorithms\n",
        "    -   Exploration: In the early stages, SA accepts worse solutions with high probability, which allows it to explore the search space more broadly and escape local optima.\n",
        "    -   Exploitation: As the temperature decreases, the algorithm becomes more conservative and starts focusing on refining the current solution. SA balances exploration and exploitation dynamically as the temperature cools.\n",
        "    -   Trade-off: SA is particularly good when the solution space is rugged (many local optima) because it has a built-in mechanism (temperature) to transition from exploration to exploitation.\n",
        "-   Genetic Algorithms\n",
        "    -   Exploration: GA uses processes like mutation and crossover to generate new solutions from the current population. Mutation allows for exploration by introducing random changes, while crossover exploits good solutions by combining them.\n",
        "    -   Exploitation: GA exploits the best solutions through selection and crossover, where solutions with higher fitness are more likely to survive and reproduce.\n",
        "    -   Trade-off: GA maintains a population of solutions, which helps with exploration, but can sometimes suffer from premature convergence if the population becomes too homogeneous, leading to poor exploitation of potentially better solutions.\n",
        "-   Greedy Algorithms\n",
        "    -   Exploration: Greedy algorithms have very limited exploration. They make the best immediate choice (locally optimal) at each step without considering the broader solution space.\n",
        "    -   Exploitation: Greedy heuristics are purely exploitative—they focus solely on improving the current state as much as possible. They tend to get stuck in local optima because they don't explore alternative solutions that might initially look worse but could lead to better outcomes.\n",
        "    -   Trade-off: A greedy algorithm doesn’t balance exploration and exploitation well. It is fast and simple but can fail when the problem has many local optima, making it inappropriate for complex problems like TSP or scheduling.\n",
        "\n",
        "### When SA Is More Appropriate\n",
        "\n",
        "-   Rugged Solution Spaces: When there are many local optima (like in the Travelling Salesman Problem or complex scheduling), SA's ability to accept worse solutions helps it explore more and avoid local traps.\n",
        "-   Time-Constrained Search: SA can be more useful when you don’t need an exact global optimum but want a good solution within a reasonable amount of time. The cooling schedule can be adjusted to control how fast the algorithm converges.\n",
        "\n",
        "# Making a Model: One Max with SA\n",
        "\n",
        "## Imports, Global Variables\n"
      ],
      "id": "46a31fa6"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "##Simulated Annealing One-Max Example\n",
        "import numpy as np\n",
        "import random\n",
        "import matplotlib.pyplot as plt\n",
        "import time\n",
        "\n",
        "# Define the necessary global variables\n",
        "num_bits = 10\n",
        "max_iterations = 1000\n",
        "initial_temp = 10\n",
        "cooling_rate = 0.99\n",
        "min_temp = 0.0001"
      ],
      "id": "454e7b9d",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Initialize\n",
        "\n",
        "-   The init_sa function initializes a random solution (sol) for the One-Max problem by generating a binary array of size num_bits (default 10), where each element is randomly set to 0 or 1.The initial solution is evaluated using the One-Max function (evaluate) to calculate its fitness (i.e., the sum of 1's in the array).The function returns the initial solution and its evaluated fitness.\n"
      ],
      "id": "9b9c83d8"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Initialization function (I)\n",
        "def init_sa(num_bits):\n",
        "    sol = np.random.randint(0, 2, num_bits)\n",
        "    return sol, evaluate(sol)"
      ],
      "id": "e171985d",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Transition (T)\n",
        "\n",
        "-   The transit function generates a neighboring solution by flipping a random bit in the current solution.\n",
        "-   This is done by randomly selecting an index in the binary array and toggling the bit (changing 1 to 0 or 0 to 1).\n",
        "-   This new solution represents the neighboring candidate that will be evaluated next, which is a small random change to the current solution.\n"
      ],
      "id": "52987400"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Transition function (T)\n",
        "def transit(sol):\n",
        "    new_sol = sol.copy()\n",
        "    index = np.random.randint(len(sol))\n",
        "    new_sol[index] = 1 - new_sol[index]  # Flip a random bit\n",
        "    return new_sol"
      ],
      "id": "c734ee1d",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Evaluate (E)\n",
        "\n",
        "-   The evaluate function calculates the fitness of the current solution by summing up the number of 1's in the binary array (sol).The One-Max problem aims to maximize this value, with the goal being to find the solution with all bits set to 1.\n"
      ],
      "id": "56713967"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Evaluation Function (E): One-max function\n",
        "def evaluate(sol):\n",
        "    return np.sum(sol)"
      ],
      "id": "476d8bf1",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Determination (D)\n",
        "\n",
        "-   The determine function decides whether to accept the new neighboring solution (neighbor_value), based on its value compared to the current solution (current_value).\n",
        "-   If the neighboring solution is better (i.e., it has a higher One-Max value), it is accepted.\n",
        "-   If the neighboring solution is worse, it may still be accepted based on the probability calculated by the simulated annealing algorithm:\n",
        "    -   The acceptance probability depends on the temperature and the difference between the new and current values.\n",
        "    -   A higher temperature allows for more exploration of worse solutions, while a lower temperature makes the algorithm more selective.\n",
        "-   The function returns True if the new solution is accepted, otherwise False.\n"
      ],
      "id": "91aee560"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Determination function for SA (D)\n",
        "def determine(neighbor_value, current_value, temperature):\n",
        "    if neighbor_value > current_value:\n",
        "        return True\n",
        "    else:\n",
        "        acceptance_probability = np.exp((neighbor_value - current_value) / temperature)\n",
        "        return random.random() < acceptance_probability"
      ],
      "id": "44d06ee8",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Run Function\n",
        "\n",
        "-   The init_sa function generates a random initial solution (current_sol) with a binary array of length num_bits.\n",
        "-   This solution is evaluated using the evaluate function, which counts the number of 1's in the array.\n",
        "-   The current solution is also set as the best solution initially, since no other solutions have been explored yet.\n",
        "-   The temperature is set to initial_temp (default 10), which controls the probability of accepting worse solutions in the early stages of the algorithm.\n",
        "-   The list value_history is initialized to store the value (fitness) of the current solution over time.\n",
        "-   This main loop runs until the temperature drops below min_temp (0.0001) or the maximum number of iterations (max_iterations, default 1000) is reached. Each iteration represents one step in the simulated annealing process.\n",
        "-   A neighboring solution (neighbor_sol) is generated by the transit function, which randomly flips one bit in the current solution. \\* This represents exploring a new area of the search space close to the current solution.\n",
        "-   The neighboring solution is evaluated using the evaluate function, which calculates its fitness (i.e., the number of 1's in the binary array). This value is compared to the current solution’s fitness.\n",
        "-   The determine function decides whether to accept the neighboring solution\n",
        "-   The current solution's fitness is appended to value_history to keep a record of the solution’s fitness across iterations. This will later be used to plot the progress of the algorithm.\n",
        "-   After each iteration, the temperature is reduced by multiplying it by the cooling_rate (default 0.99). This cooling process gradually reduces the probability of accepting worse solutions, making the algorithm behave more like greedy hill climbing toward the end.\n",
        "-   The number of iterations is incremented.\n",
        "-   After the loop terminates (either because the temperature has cooled sufficiently or the maximum number of iterations has been reached), the function returns:best_sol: The best solution found during the process.best_value: The fitness value of the best solution.value_history: A list of the fitness values over time, useful for visualizing the algorithm's progress.\n"
      ],
      "id": "b975595c"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Simulated Annealing (SA) function\n",
        "def simulated_annealing(num_bits):\n",
        "    current_sol, current_value = init_sa(num_bits)\n",
        "    best_sol, best_value = current_sol, current_value\n",
        "    temperature = initial_temp\n",
        "    value_history = [current_value]\n",
        "\n",
        "    iterations = 0\n",
        "    while temperature > min_temp and iterations < max_iterations:\n",
        "        neighbor_sol = transit(current_sol)\n",
        "        neighbor_value = evaluate(neighbor_sol)\n",
        "\n",
        "        if determine(neighbor_value, current_value, temperature):\n",
        "            current_sol, current_value = neighbor_sol, neighbor_value\n",
        "            if current_value > best_value:\n",
        "                best_sol, best_value = current_sol, current_value\n",
        "\n",
        "        # Store history of values for plotting\n",
        "        value_history.append(current_value)\n",
        "\n",
        "        # Cool down the temperature\n",
        "        temperature *= cooling_rate\n",
        "        iterations += 1\n",
        "\n",
        "    return best_sol, best_value, value_history"
      ],
      "id": "049c928a",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Main Execution\n",
        "\n",
        "-   The process starts by initializing the solution using Initialization (I) (init_sa), followed by repeated transitions (T) and evaluations (E) to explore the search space.\n",
        "-   After each transition, the Determination (D) function decides whether to accept the new solution based on the current temperature and fitness values.\n",
        "-   The temperature gradually cools down, reducing the chance of accepting worse solutions as the algorithm progresses.\n",
        "-   Finally, the results are printed and plotted for visual analysis.\n"
      ],
      "id": "0a31d26a"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Main execution\n",
        "start_time = time.time()\n",
        "best_sol, best_value, value_history = simulated_annealing(num_bits)\n",
        "end_time = time.time()\n",
        "execution_time = end_time - start_time"
      ],
      "id": "d082a9f9",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Output\n"
      ],
      "id": "acecc720"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Output results (O)\n",
        "print(f\"Best solution: {best_sol}\")\n",
        "print(f\"Best value (number of 1s): {best_value}\")\n",
        "print(f\"Execution time: {execution_time:.6f} seconds\")\n",
        "\n",
        "# Plot the simulated annealing progress\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.plot(value_history, marker='o', linestyle='--', color='blue', label='SA Progress')\n",
        "plt.title(\"One-Max Problem with Simulated Annealing Progress\")\n",
        "plt.xlabel(\"Iteration\")\n",
        "plt.ylabel(\"Objective Value (Number of 1s)\")\n",
        "plt.legend()\n",
        "plt.grid(True)\n",
        "plt.show()"
      ],
      "id": "5a400ecb",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# SA with Ackley Function\n",
        "\n",
        "-   Temperature: The algorithm starts with a high temperature, which decreases gradually. The algorithm starts with an initial high temperature (initial_temp=10) and cools down at a rate (cooling_rate=0.99) after every iteration. The temperature affects the likelihood of accepting worse solutions.\n",
        "\n",
        "-   Acceptance of Worse Solutions: There is a probability of accepting a worse solution, which decreases as the temperature drops. If the new (neighbor) solution is worse, it is still accepted with a probability calculated as follows: $$p_a^{\\text{min}} = \\exp\\left(\\frac{\\text{current\\_value} - \\text{neighbor\\_value}}{\\text{temperature}}\\right)$$\n",
        "\n",
        "-   This probability decreases as the temperature decreases, making it less likely to accept worse solutions later in the process.\n",
        "\n",
        "-   Cooling Schedule: The temperature cools down over time, usually geometrically or exponentially. The temperature decreases by multiplying it by the cooling rate (0.99 in this case) at each iteration.\n",
        "\n",
        "## Example Results\n"
      ],
      "id": "bf5d4172"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import numpy as np\n",
        "import random\n",
        "import math\n",
        "import matplotlib.pyplot as plt\n",
        "import time\n",
        "\n",
        "# Define the necessary global variables\n",
        "num_evals = 1000\n",
        "initial_temp = 10\n",
        "cooling_rate = 0.99\n",
        "min_temp = 0.00001\n",
        "\n",
        "# Ackley function (1D)\n",
        "def ackley(x):\n",
        "    a = 20\n",
        "    b = 0.2\n",
        "    c = 2 * np.pi\n",
        "    term1 = -a * np.exp(-b * np.sqrt(np.mean(np.square(x))))\n",
        "    term2 = -np.exp(np.mean(np.cos(c * np.array(x))))\n",
        "    return term1 + term2 + a + np.exp(1)\n",
        "\n",
        "# Initialization function (I) to set the starting point\n",
        "def init_sa():\n",
        "    start_x = random.uniform(-10, 10)\n",
        "    return start_x, ackley([start_x])\n",
        "\n",
        "# Transition function (T)\n",
        "def transit(current_x):\n",
        "    neighbor_x = current_x + random.uniform(-1, 1)\n",
        "    return neighbor_x\n",
        "\n",
        "# Determination function for SA (D)\n",
        "def determine(neighbor_value, current_value, temperature):\n",
        "    if neighbor_value < current_value:\n",
        "        return True\n",
        "    else:\n",
        "        acceptance_probability = np.exp((current_value - neighbor_value) / temperature)\n",
        "        return np.random.rand() < acceptance_probability\n",
        "\n",
        "# Simulated Annealing (SA) function\n",
        "#Evaluation Function (E)\n",
        "def simulated_annealing():\n",
        "    current_x, current_value = init_sa()\n",
        "    best_x, best_value = current_x, current_value\n",
        "    temperature = initial_temp\n",
        "    x_history, value_history = [current_x], [current_value]\n",
        "\n",
        "    iterations = 0\n",
        "   \n",
        "    while temperature > min_temp and iterations < num_evals:\n",
        "        neighbor_x = transit(current_x)\n",
        "        neighbor_value = ackley([neighbor_x])\n",
        "        \n",
        "        if determine(neighbor_value, current_value, temperature):\n",
        "            current_x, current_value = neighbor_x, neighbor_value\n",
        "            if current_value < best_value:\n",
        "                best_x, best_value = current_x, current_value\n",
        "        \n",
        "        # Store history of x and values for plotting\n",
        "        x_history.append(current_x)\n",
        "        value_history.append(current_value)\n",
        "\n",
        "        # Cool down the temperature\n",
        "        temperature *= cooling_rate\n",
        "        iterations += 1\n",
        "\n",
        "    return best_x, best_value, x_history, value_history\n",
        "\n",
        "# Main execution\n",
        "start_time = time.time()\n",
        "best_x, best_value, x_history, value_history = simulated_annealing()\n",
        "end_time = time.time()\n",
        "execution_time = end_time - start_time\n",
        "\n",
        "# Output (O)\n",
        "print(f\"Optimal x: {best_x}\")\n",
        "print(f\"Optimal value: {best_value}\")\n",
        "print(f\"Execution time: {execution_time:.6f} seconds\")\n",
        "\n",
        "# Plot the Ackley function and simulated annealing progress\n",
        "x_values = np.linspace(-10, 10, 1000)\n",
        "y_values = [ackley([x]) for x in x_values]\n",
        "\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.plot(x_values, y_values, label=\"Ackley Function\", color='b')\n",
        "plt.plot(x_history, value_history, marker='o', linestyle='--', color='red', label='SA Progress')\n",
        "plt.scatter(best_x, best_value, color='green', s=100, zorder=5, label='Optimal Value')\n",
        "plt.title(\"Ackley Function in 1D with Simulated Annealing Progress\")\n",
        "plt.xlabel(\"x\")\n",
        "plt.ylabel(\"f(x)\")\n",
        "plt.legend()\n",
        "plt.grid(True)\n",
        "plt.show()"
      ],
      "id": "7fbe6870",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "-   Optimal x: -0.0006396808092359318\n",
        "    -   The value -0.00063968 represents a point very close to 0 on the x-axis, where the Ackley function achieves its minimum value in the 1D case.\n",
        "    -   The true global minimum of the Ackley function occurs at 𝑥=0, so this value is nearly optimal.\n",
        "-   Optimal value: 0.0025805153299995887\n",
        "    -   This is the optimal function value at the corresponding optimal x. It represents the Ackley function value at x=−0.00063968.\n",
        "    -   The Ackley function's global minimum is 0, which occurs exactly at 𝑥=0x=0. The value 0.0025805153299995887 is very close to this, showing that the algorithm successfully minimized the function but did not reach the exact minimum. This small difference can be due to the stochastic nature of simulated annealing and the stopping criteria (temperature and iterations).\n",
        "-   Execution time: 0.012161 seconds\n",
        "    -   This indicates the total time it took for the simulated annealing algorithm to run and find the optimal solution.\n",
        "    -   The process completed in just 0.012 seconds, which is very fast. This fast execution time suggests that the algorithm quickly converged to a near-optimal solution, likely because the problem space (1D) is simple and small, and the Ackley function’s shape guides the algorithm efficiently toward the global minimum.\n",
        "\n",
        "### Comparing SA to HC with Ackley Function\n",
        "\n",
        "-   In an example run, I found the following results depicted in the png image below. The simulated annealing algorithm performed well, finding a solution very close to the global minimum of the Ackley function in a short time.\n",
        "-   The slight deviation from the exact minimum value (0) is expected due to the stochastic exploration nature of simulated annealing. You can compare these results to the ones above under a different set seed.\n",
        "\n",
        "![Comparing HA with Ackley](Pictures/sa4.png \"UFM\")\n",
        "\n",
        "-   Our SA model was much better than our HC model with the Ackley Function. Why?\n",
        "    -   The Ackley function is known for its multimodal landscape—it has many local minima and a global minimum at 𝑥=0. The landscape consists of a broad plateau followed by sharp drops toward the global minimum, making it challenging for optimization algorithms to find the true global minimum.\n",
        "    -   Hill climbing can get stuck in one of the many local minima because it only moves to a better neighboring solution. Once it reaches a local minimum, it can't escape because no better solution is immediately available in its neighborhood.\n",
        "    -   Simulated annealing, by contrast, has the ability to accept worse solutions early in the process, which allows it to escape local minima and continue searching for the global minimum.\n",
        "\n",
        "# Portfolio Diversification With SA\n"
      ],
      "id": "3c35850f"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#Simulated Annealing Finance Example\n",
        "\n",
        "import yfinance as yf\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import time\n",
        "\n",
        "# Define the necessary global variables\n",
        "max_iterations = 1000\n",
        "initial_temp = 10\n",
        "cooling_rate = 0.995\n",
        "min_temp = 1e-6\n",
        "\n",
        "# Fetch historical stock data\n",
        "def fetch_data(stocks, start_date, end_date):\n",
        "    return yf.download(stocks, start=start_date, end=end_date)['Adj Close']\n",
        "\n",
        "# Evaluation Function (E): Portfolio performance calculation\n",
        "def evaluate_portfolio(weights, mean_returns, cov_matrix):\n",
        "    returns = np.sum(mean_returns * weights) * 252  # Annualized returns\n",
        "    risk = np.sqrt(np.dot(weights.T, np.dot(cov_matrix, weights))) * np.sqrt(252)  # Annualized risk\n",
        "    sharpe_ratio = returns / risk  # Sharpe ratio\n",
        "    return returns, risk, sharpe_ratio\n",
        "\n",
        "# Initialization function (I)\n",
        "def initialize_portfolio(stocks):\n",
        "    weights = np.random.random(len(stocks))\n",
        "    weights /= np.sum(weights)  # Ensure weights sum to 1\n",
        "    return weights\n",
        "\n",
        "# Transition function (T)\n",
        "def transition_portfolio(weights):\n",
        "    new_weights = weights.copy()\n",
        "    index = np.random.randint(len(weights))\n",
        "    new_weights[index] = np.random.uniform(0, 1)\n",
        "    new_weights /= np.sum(new_weights)  # Ensure new weights sum to 1\n",
        "    return new_weights\n",
        "\n",
        "# Determination function (D)\n",
        "def determine_portfolio(neighbor_sharpe, current_sharpe, temperature):\n",
        "    if neighbor_sharpe > current_sharpe:\n",
        "        return True\n",
        "    else:\n",
        "        acceptance_probability = np.exp((neighbor_sharpe - current_sharpe) / temperature)\n",
        "        return np.random.rand() < acceptance_probability\n",
        "\n",
        "# Simulated Annealing (SA) function\n",
        "def simulated_annealing(stocks, mean_returns, cov_matrix, max_iterations, initial_temp, cooling_rate):\n",
        "    current_weights = initialize_portfolio(stocks)\n",
        "    current_returns, current_risk, current_sharpe = evaluate_portfolio(current_weights, mean_returns, cov_matrix)\n",
        "    best_weights, best_sharpe = current_weights, current_sharpe\n",
        "    temperature = initial_temp\n",
        "    sharpe_history = [current_sharpe]\n",
        "\n",
        "    iterations = 0\n",
        "    while temperature > min_temp and iterations < max_iterations:\n",
        "        neighbor_weights = transition_portfolio(current_weights)\n",
        "        neighbor_returns, neighbor_risk, neighbor_sharpe = evaluate_portfolio(neighbor_weights, mean_returns, cov_matrix)\n",
        "\n",
        "        if determine_portfolio(neighbor_sharpe, current_sharpe, temperature):\n",
        "            current_weights, current_sharpe = neighbor_weights, neighbor_sharpe\n",
        "            if neighbor_sharpe > best_sharpe:\n",
        "                best_weights, best_sharpe = neighbor_weights, neighbor_sharpe\n",
        "\n",
        "        sharpe_history.append(current_sharpe)\n",
        "\n",
        "        # Cool down the temperature\n",
        "        temperature *= cooling_rate\n",
        "        iterations += 1\n",
        "\n",
        "    return best_weights, best_sharpe, sharpe_history\n",
        "\n",
        "# List of stocks and historical data\n",
        "stocks = ['AAPL', 'GOOGL', 'MSFT', 'AMZN', 'TSLA', 'NFLX', 'NVDA', 'META', 'DIS', 'BA']\n",
        "start_date = '2023-10-01'\n",
        "end_date = '2024-10-01'\n",
        "stock_data = fetch_data(stocks, start_date, end_date)\n",
        "returns = stock_data.pct_change().dropna()\n",
        "mean_returns = returns.mean()\n",
        "cov_matrix = returns.cov()\n",
        "\n",
        "# Run simulated annealing for portfolio optimization\n",
        "start_time = time.time()\n",
        "best_weights, best_sharpe, sharpe_history = simulated_annealing(stocks, mean_returns, cov_matrix, max_iterations, initial_temp, cooling_rate)\n",
        "end_time = time.time()\n",
        "execution_time = end_time - start_time\n",
        "\n",
        "# Plot the progress of the simulated annealing algorithm\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.plot(sharpe_history, marker='o', linestyle='-', color='b', label='Sharpe Ratio Progress')\n",
        "plt.title(\"Simulated Annealing Progress for Portfolio Optimization (Sharpe Ratio)\")\n",
        "plt.xlabel(\"Iteration\")\n",
        "plt.ylabel(\"Sharpe Ratio\")\n",
        "plt.grid(True)\n",
        "plt.legend()\n",
        "plt.show()\n",
        "\n",
        "# Display the results\n",
        "print(\"Optimized Portfolio:\")\n",
        "for i, stock in enumerate(stocks):\n",
        "    print(f\"{stock}: {best_weights[i]:.4f}\")\n",
        "print(f\"Best Sharpe Ratio: {best_sharpe:.4f}\")\n",
        "print(f\"Execution time: {execution_time:.6f} seconds\")"
      ],
      "id": "b8b7d5f0",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Our Hill Climbing Finance Model was Better. Why?\n",
        "\n",
        "-   Hill Climbing\n",
        "    -   Deterministic: In each iteration, the algorithm strictly accepts a new portfolio only if it improves the Sharpe ratio (a measure of risk-adjusted returns). There’s no acceptance of worse solutions.\n",
        "    -   This results in a steady and consistent increase in the Sharpe ratio because the model always moves toward better solutions without exploring worse ones.\n",
        "    -   Since hill climbing is greedy and deterministic, it focuses on continuously improving the portfolio weights in a direct manner, which can be more efficient for problems where the optimization landscape is relatively smooth or doesn’t have too many local minima.\n",
        "-   Simulated Annealing:\n",
        "    -   Stochastic Exploration: Simulated annealing, on the other hand, allows for the acceptance of worse solutions, especially early in the process when the temperature is high. This stochastic exploration helps to avoid getting stuck in local minima, but it can sometimes lead to suboptimal moves that temporarily reduce performance.\n",
        "    -   SA slowly improves the Sharpe ratio by lowering the temperature and becoming more selective over time. However, this can result in slower convergence compared to hill climbing, which directly improves the Sharpe ratio with each iteration.\n",
        "    -   While simulated annealing balances exploration and exploitation, its performance might be slightly worse in this case because it explores a broader range of solutions, some of which may be worse. The stochastic nature may cause delays in reaching the global optimum in cases where the optimization problem is less prone to getting stuck in local minima.\n",
        "\n",
        "# Using AI\n",
        "\n",
        "-   Use the following prompt on a generative AI, like chatGPT, to learn more about the topics covered.\n",
        "* Metaheuristics Overview: What is a metaheuristic algorithm, and how does it differ from other optimization approaches like exhaustive search and hill climbing? Provide an example of a real-world problem suitable for metaheuristic algorithms.\n",
        "* Simulated Annealing Basics: Explain the key components of simulated annealing, including its transition, evaluation, and determination steps. Why is temperature an essential factor in the algorithm?\n",
        "* Exploration vs. Exploitation: Discuss how simulated annealing balances exploration and exploitation during the optimization process. How does this compare to greedy and hill climbing algorithms?\n",
        "* Parameter Tuning: Why is tuning parameters like cooling schedule and neighborhood size crucial in simulated annealing? Suggest strategies for finding optimal parameter values.\n",
        "* Fitness Evolution: How does the cooling rate affect the trajectory of fitness improvement in a simulated annealing for the One-Max problem?\n",
        "* Solution Space Exploration: Discuss how the simulated annealing algorithm explores the rugged landscape of an Ackley Function and converges to a solution.\n",
        "* Industry Use Cases: Discuss real-world applications of simulated annealing in fields such as machine learning, logistics, and engineering. Why is SA particularly suited for these problems?\n",
        "* Challenges in SA: Reflect on the challenges of applying simulated annealing to real-world problems. How do computational cost and parameter sensitivity influence its practicality?\n",
        "* Algorithm Design: How does understanding the strengths and limitations of simulated annealing inform the design of new metaheuristic algorithms?\n",
        "\n",
        "## Conclusions\n",
        "\n",
        "-   Stable and Simple Search Space: In portfolio optimization, especially with a limited number of assets, the optimization landscape might not be highly rugged, making hill climbing's greedy approach more effective at converging quickly to a good solution.\n",
        "-   Direct Progress: Hill climbing consistently increases the Sharpe ratio by only accepting better solutions, leading to slightly higher risk-adjusted returns over the SA model, which accepts suboptimal solutions early on."
      ],
      "id": "c1652c06"
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}